generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  lastName      String?
  email         String    @unique
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  emailVerified DateTime?
  image         String?
  role          Role      @default(user)
  likes         Listing[]  @relation(name: "likeBy")
  accounts      Account[]
  sessions      Session[]
  listings      Listing[]

  @@index([email])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Listing {
  id            String   @id @default(cuid())
  bathroomCount Int
  guestCount    Int
  roomCount     Int
  price         Float
  description   String
  imageSrc      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
  title         String
  locationId    String
  userId        String 

  likedBy User[] @relation(name: "likeBy")

  location Location   @relation(fields: [locationId], references: [id], onDelete: Cascade)
  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category[]

  @@index([userId, locationId])
}

model Location {
  id       String    @id @default(cuid())
  value    String
  label    String
  flag     String
  latlng   String
  region   String
  listings Listing[]
}

model Category {
  id          String       @id @default(cuid())
  label       String       @unique
  icon        CategoryIcon @unique
  description String
  listing     Listing[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  admin
  user
}

enum CategoryIcon {
  GiBarn
  GiBoatFishing
  GiCactus
  GiCastle
  GiCaveEntrance
  GiForestCamp
  GiIsland
  GiWindmill
  TbBeach
  TbMountain
  TbPool
  FaSkiing
  BsSnow
  IoDiamond
  MdOutlineVilla
}
